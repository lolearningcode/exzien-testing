name: Exzien Drift Detection CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  TERRAFORM_VERSION: "1.5.0"
  EXZIEN_API_URL: "https://terraform-drift-detector-iosdevcleo.replit.app"

jobs:
  - name: Current State Drift Check
    id: current-check
    run: |
      echo "🔍 Checking current infrastructure for drift..."
      response=$(curl -s -w "%{http_code}" \
      -X POST ${{ env.EXZIEN_API_URL }}/v1/drift-check \
      -H "Authorization: Bearer ${{ secrets.EXZIEN_API_TOKEN }}" \
      -F "state_file=@current-state.tfstate" \
      -F "cloud_provider=aws" \
      -F "project_id=${{ github.repository }}" \
      -F "env=${{ github.event.inputs.environment || 'staging' }}" \
      -F "scan_name=Current State Check - ${{ github.sha }}" \
      -F "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
      -F "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}")
      http_code="${response: -3}"
      body="${response%???}"
      echo "HTTP Status: $http_code"
      echo "Response: $body"
      if [ "$http_code" -ne 200 ]; then
        echo "::error::API request failed with status $http_code"
        exit 1
      fi
      drift_detected=$(echo "$body" | jq -r '.drift_detected')
      drift_count=$(echo "$body" | jq -r '.resource_drift_count')
      scan_id=$(echo "$body" | jq -r '.scan_id')
      echo "drift_detected=$drift_detected" >> $GITHUB_OUTPUT
      echo "drift_count=$drift_count" >> $GITHUB_OUTPUT
      echo "scan_id=$scan_id" >> $GITHUB_OUTPUT
  
  - name: Pre-Deployment Drift Check
    id: pre-check
    run: |
      echo "🔍 Validating planned changes before deployment..."
      response=$(curl -s -w "%{http_code}" \
        -X POST ${{ env.EXZIEN_API_URL }}/v1/drift-check \
        -H "Authorization: Bearer ${{ secrets.EXZIEN_API_TOKEN }}" \
        -F "state_file=@terraform-plan.json" \
        -F "cloud_provider=aws" \
        -F "project_id=${{ github.repository }}" \
        -F "env=${{ github.event.inputs.environment || 'staging' }}" \
        -F "scan_name=Pre-Deployment Check - PR#${{ github.event.number }}" \
        -F "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
        -F "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}")
      http_code="${response: -3}"
      body="${response%???}"
      echo "HTTP Status: $http_code"
      echo "Response: $body"
      if [ "$http_code" -ne 200 ]; then
        echo "::error::API request failed with status $http_code"
        exit 1
      fi
      drift_detected=$(echo "$body" | jq -r '.drift_detected')
      drift_count=$(echo "$body" | jq -r '.resource_drift_count')
      scan_id=$(echo "$body" | jq -r '.scan_id')
      echo "drift_detected=$drift_detected" >> $GITHUB_OUTPUT
      echo "drift_count=$drift_count" >> $GITHUB_OUTPUT
      echo "scan_id=$scan_id" >> $GITHUB_OUTPUT
