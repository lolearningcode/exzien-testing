name: Exzien Drift Detection CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  TERRAFORM_VERSION: "1.5.0"
  EXZIEN_API_URL: "https://terraform-drift-detector-iosdevcleo.replit.app"

jobs:
  current-state-check:
    name: Current State Drift Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init

      - name: Generate current state file
        run: |
          terraform refresh
          terraform show -json > current-state.tfstate

      - name: Run Drift Detection on Current State
        id: current-check
        run: |
          echo "🔍 Checking current infrastructure for drift..."
          response=$(curl -s -w "%{http_code}" \
            -X POST ${{ env.EXZIEN_API_URL }}/v1/drift-check \
            -H "Authorization: Bearer ${{ secrets.EXZIEN_API_TOKEN }}" \
            -F "state_file=@current-state.tfstate" \
            -F "cloud_provider=aws" \
            -F "project_id=${{ github.repository }}" \
            -F "env=${{ github.event.inputs.environment || 'staging' }}" \
            -F "scan_name=Current State Check - ${{ github.sha }}" \
            -F "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -F "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}")
          http_code="${response: -3}"
          body="${response%???}"
          echo "HTTP Status: $http_code"
          echo "Response: $body"
          if [ "$http_code" -ne 200 ]; then
            echo "::error::API request failed with status $http_code"
            exit 1
          fi
          drift_detected=$(echo "$body" | jq -r '.drift_detected')
          drift_count=$(echo "$body" | jq -r '.resource_drift_count')
          scan_id=$(echo "$body" | jq -r '.scan_id')
          echo "drift_detected=$drift_detected" >> $GITHUB_OUTPUT
          echo "drift_count=$drift_count" >> $GITHUB_OUTPUT
          echo "scan_id=$scan_id" >> $GITHUB_OUTPUT

  pre-deployment-check:
    name: Pre-Deployment Drift Check
    runs-on: ubuntu-latest
    needs: current-state-check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init

      - name: Generate Terraform Plan
        run: |
          terraform plan -out=tfplan
          terraform show -json tfplan > terraform-plan.json

      - name: Run Drift Detection on Plan
        id: pre-check
        run: |
          echo "🔍 Validating planned changes before deployment..."
          response=$(curl -s -w "%{http_code}" \
            -X POST ${{ env.EXZIEN_API_URL }}/v1/drift-check \
            -H "Authorization: Bearer ${{ secrets.EXZIEN_API_TOKEN }}" \
            -F "state_file=@terraform-plan.json" \
            -F "cloud_provider=aws" \
            -F "project_id=${{ github.repository }}" \
            -F "env=${{ github.event.inputs.environment || 'staging' }}" \
            -F "scan_name=Pre-Deployment Check - PR#${{ github.event.number }}" \
            -F "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -F "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}")
          http_code="${response: -3}"
          body="${response%???}"
          echo "HTTP Status: $http_code"
          echo "Response: $body"
          if [ "$http_code" -ne 200 ]; then
            echo "::error::API request failed with status $http_code"
            exit 1
          fi
          drift_detected=$(echo "$body" | jq -r '.drift_detected')
          drift_count=$(echo "$body" | jq -r '.resource_drift_count')
          scan_id=$(echo "$body" | jq -r '.scan_id')
          echo "drift_detected=$drift_detected" >> $GITHUB_OUTPUT
          echo "drift_count=$drift_count" >> $GITHUB_OUTPUT
          echo "scan_id=$scan_id" >> $GITHUB_OUTPUT
